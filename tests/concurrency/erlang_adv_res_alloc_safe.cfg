;; expected unsat

;; Provided by Georgel Calin.
;;
;; About format:
;; - The non-terminal symbol appearing on the left-hand side of the
;;   first grammar production is considered the start symbol of the
;;   grammar.

;; ter_size: 22; var_size: 22; init_size: 1; rules_size: 34.
;; Ters: alloc_req_c1; has_free; no_free; no_to_c1; link_c1; r1_alloc_to_c1; r2_alloc_to_c1; yes_to_c1; r1_free_from_c1; r1_not_at_c1; error_to_c1; r1_at_c1; ok_to_c1; c1_free_r1; r2_not_at_c1; unlink_c1; r2_at_c1; r2_free_from_c1; c1_free_r2; exit_c1; serv_free_r1; serv_free_r2; 
;; Vars: S1; S2; S3; S4; S5; S6; S7; S8; S9; S10; S11; S12; S13; S14; S15; S16; S17; S18; S19; S20; S21; S22; 
;; Init: S1; 
(  S1 -> ["exit_c1"  S20 ];
   S1 -> ["r2_free_from_c1"  S14 ];
   S1 -> ["r1_free_from_c1"  S8 ];
   S1 -> ["alloc_req_c1"  S2 ];
   S1 -> [];
   S8 -> ["r1_at_c1"  S9 ];
   S8 -> ["r1_not_at_c1"  S7 ];
   S9 -> ["ok_to_c1"  S10 ];
   S20 -> ["r1_not_at_c1"  S19 ];
   S20 -> ["r2_at_c1"  S21 ];
   S20 -> ["r1_at_c1"  S22 ];
   S21 -> ["serv_free_r2"  S20 ];
   S22 -> ["serv_free_r1"  S20 ];
   S10 -> ["c1_free_r1"  S11 ];
   S11 -> ["r1_at_c1"  S1 ];
   S11 -> ["r2_at_c1"  S1 ];
   S11 -> ["r2_not_at_c1"  S12 ];
   S12 -> ["unlink_c1"  S1 ];
   S13 -> ["error_to_c1"  S1 ];
   S14 -> ["r2_at_c1"  S15 ];
   S14 -> ["r2_not_at_c1"  S13 ];
   S15 -> ["ok_to_c1"  S16 ];
   S16 -> ["c1_free_r2"  S17 ];
   S17 -> ["r1_not_at_c1"  S18 ];
   S18 -> ["unlink_c1"  S1 ];
   S19 -> ["r2_not_at_c1"  S1 ];
   S2 -> ["no_free"  S3 ];
   S2 -> ["has_free"  S4 ];
   S3 -> ["no_to_c1"  S1 ];
   S4 -> ["link_c1"  S5 ];
   S5 -> ["r2_alloc_to_c1"  S6 ];
   S5 -> ["r1_alloc_to_c1"  S6 ];
   S6 -> ["yes_to_c1"  S1 ];
   S7 -> ["error_to_c1"  S1 ]
)

;; ter_size: 22; var_size: 2; init_size: 1; rules_size: 41.
;;Ters: alloc_req_c1; c1_free_r1; c1_free_r2; error_to_c1; exit_c1; has_free; link_c1; no_free; no_to_c1; ok_to_c1; r1_alloc_to_c1; r1_at_c1; r1_free_from_c1; r1_not_at_c1; r2_alloc_to_c1; r2_at_c1; r2_free_from_c1; r2_not_at_c1; serv_free_r1; serv_free_r2; unlink_c1; yes_to_c1; 
;;Vars: R1_0; R1_1; 
;;Init: R1_0; 

(  R1_0 -> [ "yes_to_c1"  R1_0 ];
   R1_0 -> [ "unlink_c1"  R1_0 ];
   R1_0 -> [ "serv_free_r2"  R1_0 ];
   R1_0 -> [ "r2_not_at_c1"  R1_0 ];
   R1_0 -> [ "r2_free_from_c1"  R1_0 ];
   R1_0 -> [ "r2_at_c1"  R1_0 ];
   R1_0 -> [ "r2_alloc_to_c1"  R1_0 ];
   R1_0 -> [ "r1_free_from_c1"  R1_0 ];
   R1_0 -> [ "ok_to_c1"  R1_0 ];
   R1_0 -> [ "no_to_c1"  R1_0 ];
   R1_0 -> [ "no_free"  R1_0 ];
   R1_0 -> [ "link_c1"  R1_0 ];
   R1_0 -> [ "has_free"  R1_0 ];
   R1_0 -> [ "exit_c1"  R1_0 ];
   R1_0 -> [ "error_to_c1"  R1_0 ];
   R1_0 -> [ "c1_free_r2"  R1_0 ];
   R1_0 -> [ "alloc_req_c1"  R1_0 ];
   R1_0 -> [];
   R1_0 -> [ "r1_not_at_c1"  R1_0 ];
   R1_0 -> [ "r1_alloc_to_c1"  R1_1 ];
   R1_1 -> [ "yes_to_c1"  R1_1 ];
   R1_1 -> [ "unlink_c1"  R1_1 ];
   R1_1 -> [ "serv_free_r2"  R1_1 ];
   R1_1 -> [ "r2_not_at_c1"  R1_1 ];
   R1_1 -> [ "r2_free_from_c1"  R1_1 ];
   R1_1 -> [ "r2_at_c1"  R1_1 ];
   R1_1 -> [ "r2_alloc_to_c1"  R1_1 ];
   R1_1 -> [ "r1_free_from_c1"  R1_1 ];
   R1_1 -> [ "ok_to_c1"  R1_1 ];
   R1_1 -> [ "no_to_c1"  R1_1 ];
   R1_1 -> [ "no_free"  R1_1 ];
   R1_1 -> [ "link_c1"  R1_1 ];
   R1_1 -> [ "has_free"  R1_1 ];
   R1_1 -> [ "exit_c1"  R1_1 ];
   R1_1 -> [ "error_to_c1"  R1_1 ];
   R1_1 -> [ "c1_free_r2"  R1_1 ];
   R1_1 -> [ "alloc_req_c1"  R1_1 ];
   R1_1 -> [];
   R1_1 -> [ "r1_at_c1"  R1_1 ];
   R1_1 -> [ "c1_free_r1"  R1_0 ];
   R1_1 -> [ "serv_free_r1"  R1_0 ]
)

;;ter_size: 22; var_size: 2; init_size: 1; rules_size: 41.
;;Ters: alloc_req_c1; c1_free_r1; c1_free_r2; error_to_c1; exit_c1; has_free; link_c1; no_free; no_to_c1; ok_to_c1; r1_alloc_to_c1; r1_at_c1; r1_free_from_c1; r1_not_at_c1; r2_alloc_to_c1; r2_at_c1; r2_free_from_c1; r2_not_at_c1; serv_free_r1; serv_free_r2; unlink_c1; yes_to_c1; 
;;Vars: R2_0; R2_1; 
;;Init: R2_0; 
(  R2_0 -> [ "yes_to_c1"  R2_0 ];
   R2_0 -> [ "unlink_c1"  R2_0 ];
   R2_0 -> [ "serv_free_r1"  R2_0 ];
   R2_0 -> [ "r2_free_from_c1"  R2_0 ];
   R2_0 -> [ "r1_not_at_c1"  R2_0 ];
   R2_0 -> [ "r1_free_from_c1"  R2_0 ];
   R2_0 -> [ "r1_at_c1"  R2_0 ];
   R2_0 -> [ "r1_alloc_to_c1"  R2_0 ];
   R2_0 -> [ "ok_to_c1"  R2_0 ];
   R2_0 -> [ "no_to_c1"  R2_0 ];
   R2_0 -> [ "no_free"  R2_0 ];
   R2_0 -> [ "link_c1"  R2_0 ];
   R2_0 -> [ "has_free"  R2_0 ];
   R2_0 -> [ "exit_c1"  R2_0 ];
   R2_0 -> [ "error_to_c1"  R2_0 ];
   R2_0 -> [ "c1_free_r1"  R2_0 ];
   R2_0 -> [ "alloc_req_c1"  R2_0 ];
   R2_0 -> [];
   R2_0 -> [ "r2_not_at_c1"  R2_0 ];
   R2_0 -> [ "r2_alloc_to_c1"  R2_1 ];
   R2_1 -> [ "yes_to_c1"  R2_1 ];
   R2_1 -> [ "unlink_c1"  R2_1 ];
   R2_1 -> [ "serv_free_r1"  R2_1 ];
   R2_1 -> [ "r2_free_from_c1"  R2_1 ];
   R2_1 -> [ "r1_not_at_c1"  R2_1 ];
   R2_1 -> [ "r1_free_from_c1"  R2_1 ];
   R2_1 -> [ "r1_at_c1"  R2_1 ];
   R2_1 -> [ "r1_alloc_to_c1"  R2_1 ];
   R2_1 -> [ "ok_to_c1"  R2_1 ];
   R2_1 -> [ "no_to_c1"  R2_1 ];
   R2_1 -> [ "no_free"  R2_1 ];
   R2_1 -> [ "link_c1"  R2_1 ];
   R2_1 -> [ "has_free"  R2_1 ];
   R2_1 -> [ "exit_c1"  R2_1 ];
   R2_1 -> [ "error_to_c1"  R2_1 ];
   R2_1 -> [ "c1_free_r1"  R2_1 ];
   R2_1 -> [ "alloc_req_c1"  R2_1 ];
   R2_1 -> [];
   R2_1 -> [ "r2_at_c1"  R2_1 ];
   R2_1 -> [ "c1_free_r2"  R2_0 ];
   R2_1 -> [ "serv_free_r2"  R2_0 ]
)

;;ter_size: 22; var_size: 4; init_size: 1; rules_size: 79.
;;Ters: alloc_req_c1; c1_free_r1; c1_free_r2; error_to_c1; exit_c1; has_free; link_c1; no_free; no_to_c1; ok_to_c1; r1_alloc_to_c1; r1_at_c1; r1_free_from_c1; r1_not_at_c1; r2_alloc_to_c1; r2_at_c1; r2_free_from_c1; r2_not_at_c1; serv_free_r1; serv_free_r2; unlink_c1; yes_to_c1; 
;;Vars: C2; C1; C0; C_err; 
;;Init: C2; 
(  C2 -> [ "yes_to_c1"  C2 ];
   C2 -> [ "unlink_c1"  C2 ];
   C2 -> [ "serv_free_r2"  C2 ];
   C2 -> [ "serv_free_r1"  C2 ];
   C2 -> [ "r2_not_at_c1"  C2 ];
   C2 -> [ "r2_free_from_c1"  C2 ];
   C2 -> [ "r2_at_c1"  C2 ];
   C2 -> [ "r1_not_at_c1"  C2 ];
   C2 -> [ "r1_free_from_c1"  C2 ];
   C2 -> [ "r1_at_c1"  C2 ];
   C2 -> [ "ok_to_c1"  C2 ];
   C2 -> [ "no_to_c1" C2 ];
   C2 -> [ "link_c1"  C2 ];
   C2 -> [ "exit_c1"  C2 ];
   C2 -> [ "error_to_c1"  C2 ];
   C2 -> [ "alloc_req_c1"  C2 ];
   C2 -> [ "has_free"  C2 ];
   C2 -> [ "r1_alloc_to_c1"  C1 ];
   C2 -> [ "r2_alloc_to_c1"  C1 ];
   C0 -> [ "yes_to_c1"  C0 ];
   C0 -> [ "unlink_c1"  C0 ];
   C0 -> [ "serv_free_r2"  C0 ];
   C0 -> [ "serv_free_r1"  C0 ];
   C0 -> [ "r2_not_at_c1"  C0 ];
   C0 -> [ "r2_free_from_c1"  C0 ];
   C0 -> [ "r2_at_c1"  C0 ];
   C0 -> [ "r1_not_at_c1"  C0 ];
   C0 -> [ "r1_free_from_c1"  C0 ];
   C0 -> [ "r1_at_c1"  C0 ];
   C0 -> [ "ok_to_c1"  C0 ];
   C0 -> [ "no_to_c1"  C0 ];
   C0 -> [ "link_c1"  C0 ];
   C0 -> [ "exit_c1"  C0 ];
   C0 -> [ "error_to_c1"  C0 ];
   C0 -> [ "alloc_req_c1"  C0 ];
   C0 -> [ "no_free"  C0 ];
   C0 -> [ "r1_alloc_to_c1"  C_err ];
   C0 -> [ "r2_alloc_to_c1"  C_err ];
   C0 -> [ "no_free"  C0 ];
   C0 -> [ "c1_free_r1"  C1 ];
   C0 -> [ "c1_free_r2"  C1 ];
   C1 -> [ "yes_to_c1"  C1 ];
   C1 -> [ "unlink_c1"  C1 ];
   C1 -> [ "serv_free_r2"  C1 ];
   C1 -> [ "serv_free_r1"  C1 ];
   C1 -> [ "r2_not_at_c1"  C1 ];
   C1 -> [ "r2_free_from_c1"  C1 ];
   C1 -> [ "r2_at_c1"  C1 ];
   C1 -> [ "r1_not_at_c1"  C1 ];
   C1 -> [ "r1_free_from_c1"  C1 ];
   C1 -> [ "r1_at_c1"  C1 ];
   C1 -> [ "ok_to_c1"  C1 ];
   C1 -> [ "no_to_c1"  C1 ];
   C1 -> [ "link_c1"  C1 ];
   C1 -> [ "exit_c1"  C1 ];
   C1 -> [ "error_to_c1"  C1 ];
   C1 -> [ "alloc_req_c1"  C1 ];
   C1 -> [ "has_free"  C1 ];
   C1 -> [ "r1_alloc_to_c1"  C0 ];
   C1 -> [ "r2_alloc_to_c1"  C0 ];
   C1 -> [ "c1_free_r1"  C2 ];
   C1 -> [ "c1_free_r2"  C2 ];
   C_err -> [ "yes_to_c1"  C_err ];
   C_err -> [ "unlink_c1"  C_err ];
   C_err -> [ "serv_free_r2"  C_err ];
   C_err -> [ "serv_free_r1"  C_err ];
   C_err -> [ "r2_not_at_c1"  C_err];
   C_err -> [ "r2_free_from_c1"  C_err ];
   C_err -> [ "r2_at_c1"  C_err ];
   C_err -> [ "r1_not_at_c1"  C_err ];
   C_err -> [ "r1_free_from_c1"  C_err ];
   C_err -> [ "r1_at_c1"  C_err ];
   C_err -> [ "ok_to_c1"  C_err ];
   C_err -> [ "no_to_c1"  C_err ];
   C_err -> [ "link_c1"  C_err ];
   C_err -> [ "exit_c1"  C_err ];
   C_err -> [ "error_to_c1"  C_err ];
   C_err -> [ "alloc_req_c1"  C_err ];
   C_err -> []
)

;;ter_size: 22; var_size: 2; init_size: 1; rules_size: 44.
;;Ters: alloc_req_c1; c1_free_r1; c1_free_r2; error_to_c1; exit_c1; has_free; link_c1; no_free; no_to_c1; ok_to_c1; r1_alloc_to_c1; r1_at_c1; r1_free_from_c1; r1_not_at_c1; r2_alloc_to_c1; r2_at_c1; r2_free_from_c1; r2_not_at_c1; serv_free_r1; serv_free_r2; unlink_c1; yes_to_c1; 
;;Vars: L1; L2; 
;;Init: L1; 
(  L1 -> [ "yes_to_c1"  L1 ];
   L1 -> [ "serv_free_r2"  L1 ];
   L1 -> [ "serv_free_r1"  L1 ];
   L1 -> [ "r2_not_at_c1"  L1 ];
   L1 -> [ "r2_free_from_c1"  L1 ];
   L1 -> [ "r2_at_c1"  L1 ];
   L1 -> [ "r2_alloc_to_c1"  L1 ];
   L1 -> [ "r1_not_at_c1"  L1 ];
   L1 -> [ "r1_free_from_c1"  L1 ];
   L1 -> [ "r1_at_c1"  L1 ];
   L1 -> [ "r1_alloc_to_c1"  L1 ];
   L1 -> [ "ok_to_c1"  L1 ];
   L1 -> [ "no_to_c1"  L1 ];
   L1 -> [ "no_free"  L1 ];
   L1 -> [ "has_free"  L1 ];
   L1 -> [ "exit_c1"  L1 ];
   L1 -> [ "error_to_c1"  L1 ];
   L1 -> [ "c1_free_r2" L1 ];
   L1 -> [ "c1_free_r1"  L1 ];
   L1 -> [ "alloc_req_c1"  L1 ];
   L1 -> [];
   L1 -> [ "link_c1"  L2 ];
   L2 -> [ "yes_to_c1"  L2 ];
   L2 -> [ "serv_free_r2"  L2 ];
   L2 -> [ "serv_free_r1"  L2 ];
   L2 -> [ "r2_not_at_c1"  L2 ];
   L2 -> [ "r2_free_from_c1"  L2 ];
   L2 -> [ "r2_at_c1"  L2 ];
   L2 -> [ "r2_alloc_to_c1"  L2 ];
   L2 -> [ "r1_not_at_c1"  L2 ];
   L2 -> [ "r1_free_from_c1"  L2 ];
   L2 -> [ "r1_at_c1"  L2 ];
   L2 -> [ "r1_alloc_to_c1"  L2 ];
   L2 -> [ "ok_to_c1"  L2 ];
   L2 -> [ "no_to_c1"  L2 ];
   L2 -> [ "no_free"  L2 ];
   L2 -> [ "has_free"  L2 ];
   L2 -> [ "exit_c1"  L2 ];
   L2 -> [ "error_to_c1"  L2 ];
   L2 -> [ "c1_free_r2"  L2 ];
   L2 -> [ "c1_free_r1"  L2 ];
   L2 -> [ "alloc_req_c1"  L2 ];
   L2 -> [ "link_c1"  L2 ];
   L2 -> [ "unlink_c1"  L1]
)
