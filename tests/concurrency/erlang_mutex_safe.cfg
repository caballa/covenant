;; expected unsat

;; Provided by Georgel Calin.
;;
;; About format:
;; - The non-terminal symbol appearing on the left-hand side of the
;;   first grammar production is considered the start symbol of the
;;   grammar.

;; ter_size: 16; var_size: 9; init_size: 1; rules_size: 81.
;; Ters: add_one_a1; add_one_a2; lock_a1; lock_a2; min_one_a1; min_one_a2; 
;;       read_a1; read_a2; ready_a1; ready_a2; syn_val_a1; syn_val_a2; 
;;       unlock_a1; unlock_a2; write_a1; write_a2; 
;; Vars: Inc1; Inc2; Inc3; Inc4; Inc5; Inc6; Inc7; Aux1; Aux2; 
;; Init: Inc1; 
(    Inc1 -> [ "write_a2" Inc1 ];
     Inc1 -> [ "unlock_a2" Inc1 ];
     Inc1 -> [ "syn_val_a2" Inc1 ];
     Inc1 -> [ "ready_a2" Inc1 ];
     Inc1 -> [ "read_a2" Inc1 ];
     Inc1 -> [ "min_one_a2" Inc1 ];
     Inc1 -> [ "lock_a2" Inc1 ];
     Inc1 -> [ "add_one_a2" Inc1 ];
     Inc1 -> [ "lock_a1" Inc2 ];
     Aux1 -> [ "write_a2" Aux1 ];
     Aux1 -> [ "unlock_a2" Aux1 ];
     Aux1 -> [ "syn_val_a2" Aux1 ];
     Aux1 -> [ "ready_a2" Aux1 ];
     Aux1 -> [ "read_a2" Aux1 ];
     Aux1 -> [ "min_one_a2" Aux1 ];
     Aux1 -> [ "lock_a2" Aux1 ];
     Aux1 -> [ "add_one_a2" Aux1 ];
     Aux1 -> [ "ready_a1" Inc3 ];
     Aux2 -> [ "write_a2" Aux2 ];
     Aux2 -> [ "unlock_a2" Aux2 ];
     Aux2 -> [ "syn_val_a2" Aux2 ];
     Aux2 -> [ "ready_a2" Aux2 ];
     Aux2 -> [ "read_a2" Aux2 ];
     Aux2 -> [ "min_one_a2" Aux2 ];
     Aux2 -> [ "lock_a2" Aux2 ];
     Aux2 -> [ "add_one_a2" Aux2 ];
     Aux2 -> [ "unlock_a1" Inc7 ];
     Inc2 -> [ "write_a2" Inc2 ];
     Inc2 -> [ "unlock_a2" Inc2 ];
     Inc2 -> [ "syn_val_a2" Inc2 ];
     Inc2 -> [ "ready_a2" Inc2 ];
     Inc2 -> [ "read_a2" Inc2 ];
     Inc2 -> [ "min_one_a2" Inc2 ];
     Inc2 -> [ "lock_a2" Inc2 ];
     Inc2 -> [ "add_one_a2" Inc2 ];
     Inc2 -> [ "add_one_a1" Aux1 ];
     Inc3 -> [ "write_a2" Inc3 ];
     Inc3 -> [ "unlock_a2" Inc3 ];
     Inc3 -> [ "syn_val_a2" Inc3 ];
     Inc3 -> [ "ready_a2" Inc3 ];
     Inc3 -> [ "read_a2" Inc3 ];
     Inc3 -> [ "min_one_a2" Inc3 ];
     Inc3 -> [ "lock_a2" Inc3 ];
     Inc3 -> [ "add_one_a2" Inc3 ];
     Inc3 -> [ "read_a1" Inc4 ];
     Inc4 -> [ "write_a2" Inc4 ];
     Inc4 -> [ "unlock_a2" Inc4 ];
     Inc4 -> [ "syn_val_a2" Inc4 ];
     Inc4 -> [ "ready_a2" Inc4 ];
     Inc4 -> [ "read_a2" Inc4 ];
     Inc4 -> [ "min_one_a2" Inc4 ];
     Inc4 -> [ "lock_a2" Inc4 ];
     Inc4 -> [ "add_one_a2" Inc4 ];
     Inc4 -> [ "syn_val_a1" Inc5 ];
     Inc5 -> [ "write_a2" Inc5 ];
     Inc5 -> [ "unlock_a2" Inc5 ];
     Inc5 -> [ "syn_val_a2" Inc5 ];
     Inc5 -> [ "ready_a2" Inc5 ];
     Inc5 -> [ "read_a2" Inc5 ];
     Inc5 -> [ "min_one_a2" Inc5 ];
     Inc5 -> [ "lock_a2" Inc5 ];
     Inc5 -> [ "add_one_a2" Inc5 ];
     Inc5 -> [ "write_a1" Inc6 ];
     Inc6 -> [ "write_a2" Inc6 ];
     Inc6 -> [ "unlock_a2" Inc6 ];
     Inc6 -> [ "syn_val_a2" Inc6 ];
     Inc6 -> [ "ready_a2" Inc6 ];
     Inc6 -> [ "read_a2" Inc6 ];
     Inc6 -> [ "min_one_a2" Inc6 ];
     Inc6 -> [ "lock_a2" Inc6 ];
     Inc6 -> [ "add_one_a2" Inc6 ];
     Inc6 -> [ "min_one_a1" Aux2 ];
     Inc7 -> [ "write_a2" Inc7 ];
     Inc7 -> [ "unlock_a2" Inc7 ];
     Inc7 -> [ "syn_val_a2" Inc7 ];
     Inc7 -> [ "ready_a2" Inc7 ];
     Inc7 -> [ "read_a2" Inc7 ];
     Inc7 -> [ "min_one_a2" Inc7 ];
     Inc7 -> [ "lock_a2" Inc7 ];
     Inc7 -> [ "add_one_a2" Inc7 ];
     Inc7 -> []
)

;; ter_size: 16; var_size: 9; init_size: 1; rules_size: 81.
;; Vars: Inc1; Inc2; Inc3; Inc4; Inc5; Inc6; Inc7; Aux1; Aux2; 
;; Init: Inc1; 
(    Inc1 -> [ "write_a1" Inc1 ];
     Inc1 -> [ "unlock_a1" Inc1 ];
     Inc1 -> [ "syn_val_a1" Inc1 ];
     Inc1 -> [ "ready_a1" Inc1 ];
     Inc1 -> [ "read_a1" Inc1 ];
     Inc1 -> [ "min_one_a1" Inc1 ];
     Inc1 -> [ "lock_a1" Inc1 ];
     Inc1 -> [ "add_one_a1" Inc1 ];
     Inc1 -> [ "lock_a2" Inc2 ];
     Aux1 -> [ "write_a1" Aux1 ];
     Aux1 -> [ "unlock_a1" Aux1 ];
     Aux1 -> [ "syn_val_a1" Aux1 ];
     Aux1 -> [ "ready_a1" Aux1 ];
     Aux1 -> [ "read_a1" Aux1 ];
     Aux1 -> [ "min_one_a1" Aux1 ];
     Aux1 -> [ "lock_a1" Aux1 ];
     Aux1 -> [ "add_one_a1" Aux1 ];
     Aux1 -> [ "ready_a2" Inc3 ];
     Aux2 -> [ "write_a1" Aux2 ];
     Aux2 -> [ "unlock_a1" Aux2 ];
     Aux2 -> [ "syn_val_a1" Aux2 ];
     Aux2 -> [ "ready_a1" Aux2 ];
     Aux2 -> [ "read_a1" Aux2 ];
     Aux2 -> [ "min_one_a1" Aux2 ];
     Aux2 -> [ "lock_a1" Aux2 ];
     Aux2 -> [ "add_one_a1" Aux2 ];
     Aux2 -> [ "unlock_a2" Inc7 ];
     Inc2 -> [ "write_a1" Inc2 ];
     Inc2 -> [ "unlock_a1" Inc2 ];
     Inc2 -> [ "syn_val_a1" Inc2 ];
     Inc2 -> [ "ready_a1" Inc2 ];
     Inc2 -> [ "read_a1" Inc2 ];
     Inc2 -> [ "min_one_a1" Inc2 ];
     Inc2 -> [ "lock_a1" Inc2 ];
     Inc2 -> [ "add_one_a1" Inc2 ];
     Inc2 -> [ "add_one_a2" Aux1 ];
     Inc3 -> [ "write_a1" Inc3 ];
     Inc3 -> [ "unlock_a1" Inc3 ];
     Inc3 -> [ "syn_val_a1" Inc3 ];
     Inc3 -> [ "ready_a1" Inc3 ];
     Inc3 -> [ "read_a1" Inc3 ];
     Inc3 -> [ "min_one_a1" Inc3 ];
     Inc3 -> [ "lock_a1" Inc3 ];
     Inc3 -> [ "add_one_a1" Inc3 ];
     Inc3 -> [ "read_a2" Inc4 ];
     Inc4 -> [ "write_a1" Inc4 ];
     Inc4 -> [ "unlock_a1" Inc4 ];
     Inc4 -> [ "syn_val_a1" Inc4 ];
     Inc4 -> [ "ready_a1" Inc4 ];
     Inc4 -> [ "read_a1" Inc4 ];
     Inc4 -> [ "min_one_a1" Inc4 ];
     Inc4 -> [ "lock_a1" Inc4 ];
     Inc4 -> [ "add_one_a1" Inc4 ];
     Inc4 -> [ "syn_val_a2" Inc5 ];
     Inc5 -> [ "write_a1" Inc5 ];
     Inc5 -> [ "unlock_a1" Inc5 ];
     Inc5 -> [ "syn_val_a1" Inc5 ];
     Inc5 -> [ "ready_a1" Inc5 ];
     Inc5 -> [ "read_a1" Inc5 ];
     Inc5 -> [ "min_one_a1" Inc5 ];
     Inc5 -> [ "lock_a1" Inc5 ];
     Inc5 -> [ "add_one_a1" Inc5 ];
     Inc5 -> [ "write_a2" Inc6 ];
     Inc6 -> [ "write_a1" Inc6 ];
     Inc6 -> [ "unlock_a1" Inc6 ];
     Inc6 -> [ "syn_val_a1" Inc6 ];
     Inc6 -> [ "ready_a1" Inc6 ];
     Inc6 -> [ "read_a1" Inc6 ];
     Inc6 -> [ "min_one_a1" Inc6 ];
     Inc6 -> [ "lock_a1" Inc6 ];
     Inc6 -> [ "add_one_a1" Inc6 ];
     Inc6 -> [ "min_one_a2" Aux2 ];
     Inc7 -> [ "write_a1" Inc7 ];
     Inc7 -> [ "unlock_a1" Inc7 ];
     Inc7 -> [ "syn_val_a1" Inc7 ];
     Inc7 -> [ "ready_a1" Inc7 ];
     Inc7 -> [ "read_a1" Inc7 ];
     Inc7 -> [ "min_one_a1" Inc7 ];
     Inc7 -> [ "lock_a1" Inc7 ];
     Inc7 -> [ "add_one_a1" Inc7 ];
     Inc7 -> []
)


;; ter_size: 16; var_size: 6; init_size: 1; rules_size: 37.
;; Vars: Fc; Fc_a1; Fc_a2; Lc1; Lc2; Lc3; 
;; Init: Fc; 
(    Fc -> [ "min_one_a2" Fc ];
     Fc -> [ "min_one_a1" Fc ];
     Fc -> [ "add_one_a2" Fc ];
     Fc -> [ "add_one_a1" Fc ];
     Fc -> [ "lock_a1" Fc_a1 ];
     Fc -> [ "lock_a2" Fc_a2 ];
     Fc -> [];
     Fc_a1 -> [ "min_one_a2" Fc_a1 ];
     Fc_a1 -> [ "min_one_a1" Fc_a1 ];
     Fc_a1 -> [ "add_one_a2" Fc_a1 ];
     Fc_a1 -> [ "add_one_a1" Fc_a1 ];
     Fc_a1 -> [ "ready_a1" Lc1 ];
     Fc_a2 -> [ "min_one_a2" Fc_a2 ];
     Fc_a2 -> [ "min_one_a1" Fc_a2 ];
     Fc_a2 -> [ "add_one_a2" Fc_a2 ];
     Fc_a2 -> [ "add_one_a1" Fc_a2 ];
     Fc_a2 -> [ "ready_a2" Lc1 ];
     Lc1 -> [ "min_one_a2" Lc1 ];
     Lc1 -> [ "min_one_a1" Lc1 ];
     Lc1 -> [ "add_one_a2" Lc1 ];
     Lc1 -> [ "add_one_a1" Lc1 ];
     Lc1 -> [ "write_a1" Lc1 ];
     Lc1 -> [ "write_a2" Lc1 ];
     Lc1 -> [ "read_a1" Lc2 ];
     Lc1 -> [ "read_a2" Lc3 ];
     Lc1 -> [ "unlock_a1" Fc ];
     Lc1 -> [ "unlock_a2" Fc ];
     Lc2 -> [ "min_one_a2" Lc2 ];
     Lc2 -> [ "min_one_a1" Lc2 ];
     Lc2 -> [ "add_one_a2" Lc2 ];
     Lc2 -> [ "add_one_a1" Lc2 ];
     Lc2 -> [ "syn_val_a1" Lc1 ];
     Lc3 -> [ "min_one_a2" Lc3 ];
     Lc3 -> [ "min_one_a1" Lc3 ];
     Lc3 -> [ "add_one_a2" Lc3 ];
     Lc3 -> [ "add_one_a1" Lc3 ];
     Lc3 -> [ "syn_val_a2" Lc1 ]
)



;; ter_size: 16; var_size: 3; init_size: 1; rules_size: 43.
;; Vars: C0, C1, C2
;; Init: C0; 
(    C0 -> [ "write_a2" C0 ];
     C0 -> [ "write_a1" C0 ];
     C0 -> [ "unlock_a2" C0 ];
     C0 -> [ "unlock_a1" C0 ];
     C0 -> [ "syn_val_a2" C0 ];
     C0 -> [ "syn_val_a1" C0 ];
     C0 -> [ "ready_a2" C0 ];
     C0 -> [ "ready_a1" C0 ];
     C0 -> [ "read_a2" C0 ];
     C0 -> [ "read_a1" C0 ];
     C0 -> [ "lock_a2" C0 ];
     C0 -> [ "lock_a1" C0 ];
     C0 -> [ "add_one_a1" C1 ];
     C0 -> [ "add_one_a2" C1 ];
     C1 -> [ "write_a2" C1 ];
     C1 -> [ "write_a1" C1 ];
     C1 -> [ "unlock_a2" C1 ];
     C1 -> [ "unlock_a1" C1 ];
     C1 -> [ "syn_val_a2" C1 ];
     C1 -> [ "syn_val_a1" C1 ];
     C1 -> [ "ready_a2" C1 ];
     C1 -> [ "ready_a1" C1 ];
     C1 -> [ "read_a2" C1 ];
     C1 -> [ "read_a1" C1 ];
     C1 -> [ "lock_a2" C1 ];
     C1 -> [ "lock_a1" C1 ];
     C1 -> [ "add_one_a2" C2 ];
     C1 -> [ "add_one_a1" C2 ];
     C1 -> [ "min_one_a1" C0 ];
     C1 -> [ "min_one_a2" C0 ];
     C2 -> [ "write_a2" C2 ];
     C2 -> [ "write_a1" C2 ];
     C2 -> [ "unlock_a2" C2 ];
     C2 -> [ "unlock_a1" C2 ];
     C2 -> [ "syn_val_a2" C2 ];
     C2 -> [ "syn_val_a1" C2 ];
     C2 -> [ "ready_a2" C2 ];
     C2 -> [ "ready_a1" C2 ];
     C2 -> [ "read_a2" C2 ];
     C2 -> [ "read_a1" C2 ];
     C2 -> [ "lock_a2" C2 ];
     C2 -> [ "lock_a1" C2 ];
     C2 -> []
)
