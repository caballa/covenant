;; expected unsat

;; Provided by Georgel Calin.
;;
;; About format:
;; - The non-terminal symbol appearing on the left-hand side of the
;;   first grammar production is considered the start symbol of the
;;   grammar.


;; ter_size: 20; var_size: 17; init_size: 1; rules_size: 25.
;; Ters: alloc_req_1; alloc_req_2; alloc_to_1; alloc_to_2; at_1; at_2; error_to_1; error_to_2; free_from_1; free_from_2; free_req_1; free_req_2; has_free; no_free; no_to_1; no_to_2; ok_to_1; ok_to_2; yes_to_1; yes_to_2; 
;; Vars: S1; S2; S3; S4; S5; S6; S7; S8; S9; S10; S11; S12; S13; S14; S15; S16; S17; 
;; Init: S1; 
(   S1 -> [ "alloc_req_1"  S2 ];
    S1 -> [];
    S1 -> [ "alloc_req_2"  S6 ];
    S1 -> [ "free_req_1"  S14 ];
    S1 -> [ "free_req_2"  S10 ];
    S8 -> [ "alloc_to_2"  S9 ];
    S9 -> [ "yes_to_2"  S1 ];
    S10 -> [ "at_2"  S11 ];
    S10 -> [ "at_1"  S13 ];
    S11 -> [ "free_from_2"  S12 ];
    S12 -> [ "ok_to_2"  S1 ];
    S13 -> [ "error_to_2"  S1 ];
    S14 -> [ "at_1"  S15 ];
    S14 -> [ "at_2"  S17 ];
    S15 -> [ "free_from_1"  S16 ];
    S16 -> [ "ok_to_1"  S1 ];
    S17 -> [ "error_to_1"  S1 ];
    S2 -> [ "has_free"  S3 ];
    S2 -> [ "no_free"  S5 ];
    S3 -> [ "alloc_to_1"  S4 ];
    S4 -> [ "yes_to_1"  S1 ];
    S5 -> [ "no_to_1"  S1 ];
    S6 -> [ "has_free"  S8 ];
    S6 -> [ "no_free"  S7 ];
    S7 -> [ "no_to_2"  S1 ]
)


;; ter_size: 20; var_size: 5; init_size: 1; rules_size: 75.
;; Vars: R1; R2; R3; R4; R5; 
;; Init: R1; 
(   R1 -> [ "yes_to_2"  R1 ];
    R1 -> [ "yes_to_1"  R1 ];
    R1 -> [ "ok_to_2"  R1 ];
    R1 -> [ "ok_to_1"  R1 ];
    R1 -> [ "no_to_2"  R1 ];
    R1 -> [ "no_to_1"  R1 ];
    R1 -> [ "free_req_2"  R1 ];
    R1 -> [ "free_req_1"  R1 ];
    R1 -> [ "error_to_2"  R1 ];
    R1 -> [ "error_to_1"  R1 ];
    R1 -> [ "alloc_req_2"  R1 ];
    R1 -> [ "alloc_req_1"  R1 ];
    R1 -> [ "has_free"  R1 ];
    R1 -> [ "alloc_to_1"  R2 ];
    R1 -> [ "alloc_to_2"  R3 ];
    R2 -> [ "yes_to_2"  R2 ];
    R2 -> [ "yes_to_1"  R2 ];
    R2 -> [ "ok_to_2"  R2 ];
    R2 -> [ "ok_to_1"  R2 ];
    R2 -> [ "no_to_2"  R2 ];
    R2 -> [ "no_to_1"  R2 ];
    R2 -> [ "free_req_2"  R2 ];
    R2 -> [ "free_req_1"  R2 ];
    R2 -> [ "error_to_2"  R2 ];
    R2 -> [ "error_to_1"  R2 ];
    R2 -> [ "alloc_req_2"  R2 ];
    R2 -> [ "alloc_req_1"  R2 ];
    R2 -> [ "alloc_to_1"  R4 ];
    R2 -> [ "alloc_to_2"  R4 ];
    R2 -> [ "at_1"  R2 ];
    R2 -> [ "no_free"  R2 ];
    R2 -> [ "free_from_1"  R1 ];
    R3 -> [ "yes_to_2"  R3 ];
    R3 -> [ "yes_to_1"  R3 ];
    R3 -> [ "ok_to_2"  R3 ];
    R3 -> [ "ok_to_1"  R3 ];
    R3 -> [ "no_to_2"  R3 ];
    R3 -> [ "no_to_1"  R3 ];
    R3 -> [ "free_req_2"  R3 ];
    R3 -> [ "free_req_1"  R3 ];
    R3 -> [ "error_to_2"  R3 ];
    R3 -> [ "error_to_1"  R3 ];
    R3 -> [ "alloc_req_2"  R3 ];
    R3 -> [ "alloc_req_1"  R3 ];
    R3 -> [ "alloc_to_1"  R5 ];
    R3 -> [ "alloc_to_2"  R5 ];
    R3 -> [ "at_2"  R3 ];
    R3 -> [ "no_free"  R3 ];
    R3 -> [ "free_from_2"  R1 ];
    R4 -> [ "yes_to_2"  R4 ];
    R4 -> [ "yes_to_1"  R4 ];
    R4 -> [ "ok_to_2"  R4 ];
    R4 -> [ "ok_to_1"  R4 ];
    R4 -> [ "no_to_2"  R4 ];
    R4 -> [ "no_to_1"  R4 ];
    R4 -> [ "free_req_2"  R4 ];
    R4 -> [ "free_req_1"  R4 ];
    R4 -> [ "error_to_2"  R4 ];
    R4 -> [ "error_to_1"  R4 ];
    R4 -> [ "alloc_req_2"  R4 ];
    R4 -> [ "alloc_req_1"  R4 ];
    R4 -> [];
    R5 -> [ "yes_to_2"  R5 ];
    R5 -> [ "yes_to_1"  R5 ];
    R5 -> [ "ok_to_2"  R5 ];
    R5 -> [ "ok_to_1"  R5 ];
    R5 -> [ "no_to_2"  R5 ];
    R5 -> [ "no_to_1"  R5 ];
    R5 -> [ "free_req_2"  R5 ];
    R5 -> [ "free_req_1"  R5 ];
    R5 -> [ "error_to_2"  R5 ];
    R5 -> [ "error_to_1"  R5 ];
    R5 -> [ "alloc_req_2"  R5 ];
    R5 -> [ "alloc_req_1"  R5 ];
    R5 -> []
)
