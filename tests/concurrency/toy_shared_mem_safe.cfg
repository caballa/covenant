;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; initially x=0 and y=0
;; T1:                     T2:
;;   x := not y            y := not x
;;   if (*) then call T1   if (*) then call T2
;;   x := not y            y := not x
;; assert x=0 or y=0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; expected unsat

;; Provided by Georgel Calin.
;;
;; About format:
;; - The non-terminal symbol appearing on the left-hand side of the
;;   first grammar production is considered the start symbol of the
;;   grammar.


;; CFG T1
;; ter_size: 8; var_size: 9; init_size: 1; rules_size: 43.
(   S1 -> ["y_at_1" S1]; 
    S1 -> ["y_at_0" S1];
    S1 -> ["x_at_1" S1];
    S1 -> ["x_at_0" S1];
    S1 -> ["set_y_1" S1];
    S1 -> ["set_y_0" S1];
    S1 -> ["y_at_0" S2];
    S1 -> ["y_at_1" S3 ];
    S2 -> ["set_x_1" S5 ];
    S2 -> ["set_x_1" S4 ];
    S3 -> ["set_x_0" S5 ];
    S3 -> ["set_x_0" S4 ];
    S4 -> ["y_at_1" S4 ];
    S4 -> ["y_at_0" S4 ];
    S4 -> ["x_at_1" S4 ];
    S4 -> ["x_at_0" S4 ];
    S4 -> ["set_y_1" S4 ];
    S4 -> ["set_y_0" S4 ];
    S4 -> [S1 S5 ];
    S5 -> ["y_at_1" S5 ];
    S5 -> ["y_at_0" S5 ];
    S5 -> ["x_at_1" S5 ];
    S5 -> ["x_at_0" S5 ];
    S5 -> ["set_y_1" S5 ];
    S5 -> ["set_y_0" S5 ];
    S5 -> ["y_at_0" S6 ];
    S5 -> ["y_at_1" S7 ];
    S6 -> ["set_x_1" S8 ];
    S7 -> ["set_x_0" S8 ];
    S8 -> ["y_at_1" S8 ];
    S8 -> ["y_at_0" S8 ];
    S8 -> ["x_at_1" S8 ];
    S8 -> ["x_at_0" S8 ];
    S8 -> ["set_y_1" S8 ];
    S8 -> ["set_y_0" S8 ];
    S8 -> ["x_at_1" S9 ];
    S9 -> ["y_at_1" S9 ];
    S9 -> ["y_at_0" S9 ];
    S9 -> ["x_at_1" S9 ];
    S9 -> ["x_at_0" S9 ];
    S9 -> ["set_y_1" S9 ];
    S9 -> ["set_y_0" S9 ];
    S9 -> []
)

;; CFG T2
;; ter_size: 8; var_size: 9; init_size: 1; rules_size: 43.
(   S1 -> ["y_at_1" S1 ];
    S1 -> ["y_at_0" S1 ];
    S1 -> ["x_at_1" S1 ];
    S1 -> ["x_at_0" S1 ];
    S1 -> ["set_x_1" S1 ];
    S1 -> ["set_x_0" S1 ];
    S1 -> ["x_at_0" S2 ];
    S1 -> ["x_at_1" S3 ];
    S2 -> ["set_y_1" S5 ];
    S2 -> ["set_y_1" S4 ];
    S3 -> ["set_y_0" S5 ];
    S3 -> ["set_y_0" S4 ];
    S4 -> ["y_at_1" S4 ];
    S4 -> ["y_at_0" S4 ];
    S4 -> ["x_at_1" S4 ];
    S4 -> ["x_at_0" S4 ];
    S4 -> ["set_x_1" S4 ];
    S4 -> ["set_x_0" S4 ];
    S4 -> [S1 S5 ];
    S5 -> ["y_at_1" S5 ];
    S5 -> ["y_at_0" S5 ];
    S5 -> ["x_at_1" S5 ];
    S5 -> ["x_at_0" S5 ];
    S5 -> ["set_x_1" S5 ];
    S5 -> ["set_x_0" S5 ];
    S5 -> ["x_at_0" S6 ];
    S5 -> ["x_at_1" S7 ];
    S6 -> ["set_y_1" S8 ];
    S7 -> ["set_y_0" S8 ];
    S8 -> ["y_at_1" S8 ];
    S8 -> ["y_at_0" S8 ];
    S8 -> ["x_at_1" S8 ];
    S8 -> ["x_at_0" S8 ];
    S8 -> ["set_x_1" S8 ];
    S8 -> ["set_x_0" S8 ];
    S8 -> ["y_at_1" S9 ];
    S9 -> ["y_at_1" S9 ];
    S9 -> ["y_at_0" S9 ];
    S9 -> ["x_at_1" S9 ];
    S9 -> ["x_at_0" S9 ];
    S9 -> ["set_x_1" S9 ];
    S9 -> ["set_x_0" S9 ];
    S9 -> []
)


;; REG X
;; ter_size: 8; var_size: 2; init_size: 1; rules_size: 16.
(   X0 -> ["y_at_1" X0 ];
    X0 -> ["y_at_0" X0 ];
    X0 -> ["set_y_1" X0 ];
    X0 -> ["set_y_0" X0 ];
    X0 -> ["x_at_0" X0 ];
    X0 -> ["set_x_0" X0 ];
    X0 -> ["set_x_1" X1 ];
    X0 -> [];
    X1 -> ["y_at_1" X1 ];
    X1 -> ["y_at_0" X1 ];
    X1 -> ["set_y_1" X1 ];
    X1 -> ["set_y_0" X1 ];
    X1 -> ["set_x_0" X0 ];
    X1 -> ["x_at_1" X1 ];
    X1 -> ["set_x_1" X1 ];
    X1 -> []
)


;; REG Y
;; ter_size: 8; var_size: 2; init_size: 1; rules_size: 16.
(   Y0 -> ["x_at_1" Y0 ];
    Y0 -> ["x_at_0" Y0 ];
    Y0 -> ["set_x_1" Y0 ];
    Y0 -> ["set_x_0" Y0 ];
    Y0 -> ["y_at_0" Y0 ];
    Y0 -> ["set_y_0" Y0 ];
    Y0 -> ["set_y_1" Y1 ];
    Y0 -> [];
    Y1 -> ["x_at_1" Y1 ];
    Y1 -> ["x_at_0" Y1 ];
    Y1 -> ["set_x_1" Y1 ];
    Y1 -> ["set_x_0" Y1 ];
    Y1 -> ["set_y_0" Y0 ];
    Y1 -> ["y_at_1" Y1 ];
    Y1 -> ["set_y_1" Y1 ];
    Y1 -> []
)
